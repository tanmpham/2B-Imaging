version: '3.8'
name: 2b-imaging
services:
  zookeeper:
    image: wurstmeister/zookeeper
    restart: always
    hostname: zookeeper
    volumes:
      - zookeeper-volume:/opt/zookeeper-3.4.13/data
    networks:
      - 'apiNetwork'
  kafka:
    image: wurstmeister/kafka
    restart: always
    command: [start-kafka.sh]
    ports:
      - '9092:9092'
    hostname: kafka
    environment:
      KAFKA_CREATE_TOPICS: 'events:1:1' # topic:partition:replicas
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG_DIRS: /kafka/kafka-logs
      KAFKA_BROKER_ID: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - kafka-volume:/kafka/kafka-logs
    networks:
      - 'apiNetwork'
    depends_on:
      - 'zookeeper'

  #   client-queue:
  #     build:
  #       context: ../queue
  #       dockerfile: Dockerfile
  #     image: client_queue
  #     restart: always
  #     ports:
  #       - 4600:4600
  #     networks:
  #       - 'apiNetwork'
  #     depends_on:
  #       - 'kafka'

  client-backend:
    build:
      context: ../backend2
      dockerfile: Dockerfile
    image: client_backend
    restart: always
    ports:
      - 4400:4400
    volumes:
      - ../backend2/patientimages:/app/patientimages
    networks:
      - 'apiNetwork'
    depends_on:
      - 'kafka'

  client-frontend:
    build:
      context: ../frontend2
      dockerfile: Dockerfile
    image: client_frontend
    restart: always
    ports:
      - 3004:3004
    networks:
      - 'apiNetwork'
    depends_on:
      - 'client-backend'
networks:
  apiNetwork:
volumes:
  kafka-volume:
  zookeeper-volume:
